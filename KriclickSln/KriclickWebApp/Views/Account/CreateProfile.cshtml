@model Kriclick.Common.Models.UserProfileViewModel
@{
    ViewBag.Title = "Create Profile";
    Layout = "~/Views/Shared/_LayoutWithoutFooter.cshtml";
}
@section scripts{
    @*<script src="~/Scripts/passwordStrengthMeter.js"></script>*@
    <script src="~/Scripts/jquery.maskedinput.js"></script>

    <script>
        $(document).ready(function () {

            $("#businessPhoneNo").mask("(999) 999-9999");
            $("#personalPhoneNo").mask("(999) 999-9999");

            $("#brand-new").click(function () {
                $('#business').hide();
                $('#personal').show();
            });
            $("#user-like").click(function () {
                $('#business').show();
                $('#personal').hide();
            });
        });
    </script>
    <style>
        .ValidationFontSize {
            font-size: 12px !important;
            color: #d50000 !important;
            /*color: #ffffff !important;
            position: relative !important;
            text-transform: none !important;*/
        }

        .dropdownscroll {
            max-height: 150px;
            min-width: 50px;
            overflow-y: scroll;
        }
        .validationmsgdisplay {
            display:none;
        }

        .validationmsgmargin {
            margin-left:15px;
        }

        .imagePosition {
            margin-top: -73px;
            min-width: 73px;
            z-index: 10000;
            position: relative;
        }

        .passwordstrengthbar {
            height: 6px;
            border-radius: inherit;
            margin-top: 15px;
        }
        .form-group {
            margin-bottom:0px;
        }

        /*.fa {
            cursor: cell;
        }*/
    </style>
    @*<script src="~/Scripts/password-score.js"></script>
    <script src="~/Scripts/password-score-options.js"></script>
    <script src="~/Scripts/bootstrap-strength-meter.js"></script>*@
    <script type="text/javascript">
        $(document).ready(function () {
            //$('#example-progress-bar-hierarchy').strengthMeter('progressBar', {
            //    container: $('#example-progress-bar-hierarchy-container'),
            //    hierarchy: {
            //        '0': 'progress-bar-danger',
            //        '10': 'progress-bar-warning',
            //        '20': 'progress-bar-success'
            //    }
            //});
            //$('#example-progress-bar-hierarchy').strengthMeter('text', {
            //    container: $('#example-text-hierarchy-text'),
            //    hierarchy: {
            //        '0': ['text-danger', 'very weak'],
            //        '10': ['text-warning', 'weak'],
            //        '15': ['text-warning', 'good'],
            //        '20': ['text-success', 'strong'],
            //        '25': ['text-success', 'very strong']
              
            //    }
            //});
            //$('#example-progress-bar-hierarchy').keyup(function () {
            //    $('#example-text-hierarchy-text').removeClass('validationmsgdisplay');
            //    $('#example-progress-bar-hierarchy-container').removeClass('validationmsgdisplay');
            //    $('#example-text-hierarchy-text').addClass('validationmsgmargin');
            //});

            
            //$('#example-text-hierarchy-text').addClass('validationmsgdisplay');
            //$('#example-progress-bar-hierarchy-container').addClass('validationmsgdisplay');
            
            $('#example-progress-bar-hierarchy-container div').addClass('passwordstrengthbar');
        });
    </script>

    <script language="javascript">
        var result = "";
        $(document).ready(function () {
            $('#BusinessProfileViewModel_IsSpotFinder').val(true);

            var validatorp = $("#PersonalForm").data('validator');
            validatorp.settings.ignore = "";

            var validator = $("#BusinessForm").data('validator');
            validator.settings.ignore = "";



            //$('#StateId').val('');
            //$('#PersonalStateId').val('');

            $('#Password').keyup(function () {
                $('#result').html(passwordStrength($('#Password').val(), ""))
                result = $('#result').html();
                result2 = $('#result').html();
                if (result == "Too short") {
                    $('#result').attr({ 'style': 'color:Red;' });
                }
                if (result == "Bad") {
                    $('#result').attr({ 'style': 'color:Olive;' });
                }
                if (result == "Good") {
                    $('#result').attr({ 'style': 'color:Lime;' });
                }
                if (result == "Strong") {
                    $('#result').attr({ 'style': 'color:Green;' });
                }
                $('#result2').html(passwordStrength($('#Password').val(), ""))
                result2 = $('#result2').html();
                if (result2 == "Too short") {
                    $('#result2').attr({ 'style': 'color:Red;' });
                }
                if (result2 == "Bad") {
                    $('#result2').attr({ 'style': 'color:Olive;' });
                }
                if (result2 == "Good") {
                    $('#result2').attr({ 'style': 'color:Lime;' });
                }
                if (result2 == "Strong") {
                    $('#result2').attr({ 'style': 'color:Green;' });
                }

            })
        })

        function selectbusinessstate(stateid, statetext) {
            $('#ststate').text(statetext);
            $('#StateId').val(stateid);
            //alert(statetext);
        }
        function selectstatePersonal(stateid, statetext) {

            $('#personalState').text(statetext);
            $('#PersonalStateId').val(stateid);

            //alert(statetext);
            //alert(stateid);
        }
        function selectindustry(industryid, industrytext) {
            $('#stateInd').text(industrytext);
            $('#BusinessProfileViewModel_IndustryTypeId').val(industryid);
            //alert(statetext);
        }
        function checkext(fileid) {
            //alert(fileid);
            //$('#' + fileid).val();
            var ext = $('#' + fileid).val().split('.').pop().toLowerCase();
            if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg', 'bmp']) == -1) {
                alert('invalid extension!\n\nPlease upload only image file with extensions(gif, png, jpg, jpeg, bmp)');
                $('#' + fileid).val('');
            }
            //else {
            //    $('#PersonalImage').attr('src', $('#' + fileid).val());
            //    $('#PersonalImage').addClass('imagePosition');
            //}
        }
        function ShowImagePreview(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#mylogo').prop('src', e.target.result)
                        .width(73)
                        .height(73);
                    $('#personal .logo-avatar .upload-ad i').removeClass('fa-user').css('top', '0').css('left', '0');
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
        function ShowImagePreviewBussiness(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#mylogoBusiness').prop('src', e.target.result)
                        .width(73)
                        .height(73);
                    $('#business .logo-avatar .upload-ad i').removeClass('fa-user').css('top', '0').css('left', '0');
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
        function checkusername(username, usertype) {
            //alert(username);
            $('#spabussusername').hide();
            $('#spausername').hide();
            $('#buttonbusiness').show();
            $('#buttonuser').show();

            var userid = $('input[name=UserId]').val();
            //alert(userid);
            //var postdata = { userName: username, userId: userid };

            $.ajax({
                url: "/webapi/Values/VerifyUsername?userName=" + username + "&userId=" + userid,
                type: "GET",
                //data: JSON.stringify(postdata),
                //dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data == "-1") {
                        if (usertype == "business") {
                            $('#spabussusername').show();
                            $('#buttonbusiness').hide();
                        }
                        else {
                            $('#spausername').show();
                            $('#buttonuser').hide();
                        }
                    }
                },
                error: function () {
                    $('#spabussusername').hide();
                    $('#spausername').hide();
                    $('#buttonbusiness').show();
                    $('#buttonuser').show();
                }
            });
        }

        function setcheck(chk) {
            if (chk == "1") {
                $('#BusinessProfileViewModel_IsSpotFinder').val(true);
            }
            else {
                $('#BusinessProfileViewModel_IsSpotFinder').val(false);
            }
        }
    </script>
}

<div id="body-panel" class="body-panel">
    <!-- Start Body Panel -->
    <div class="comp-reg-page-wrap">
        <div class="title-text">
            <h3 class="u-case">Complete Your Registration</h3>
            <span class="block">Complete this form to determine the type of account you need.</span>
        </div>
        <div class="radio-box">
            <div class="row">
                <div class="radio col col-xs-12 col-sm-12">
                    <input type="radio" id="brand-new" name="UserTypeId" value="1" class="css-checkbox" checked="checked">
                    <label for="brand-new"><span></span>Personal</label>

                </div>
                <div class="radio col col-xs-12 col-sm-12">
                    <input type="radio" id="user-like" name="UserTypeId" value="2" class="css-checkbox">
                    <label for="user-like"><span></span>Business</label>
                </div>
            </div>
        </div>


        <div id="business" style="display:none">
            @using (Html.BeginForm("CreateBusinessProfile", "Account", FormMethod.Post, new { @class = "form-horizontal comp-reg-form", role = "form", enctype = "multipart/form-data", @id = "BusinessForm" }))
            {
                @*@Html.ValidationSummary("", new { @class = "text-danger" })*@
                <div class="row">
                    <div class="col col-xs-24 col-sm-24">
                        <input type="hidden" name="UserTypeId" value="2" />
                        <span class="cr-box-title">Industry Type</span>
                        <div class="input-group-btn search-panel">
                            @Html.DropDownListFor(m => m.BusinessProfileViewModel.IndustryTypeId, new SelectList(ViewBag.IndustryList, "IndustryTypeId", "IndustryType1"), new { @class = "selectpicker" })

                            @*<button type="button" class="btn btn-default dropdown-toggle text-left" data-toggle="dropdown">
                                    <span id="stateInd">Select an Industry</span>
                                    <span class="arrow-button"><i class="fa fa-angle-down"></i></span>
                                </button>
                                <ul class="dropdown-menu dropdownscroll" role="menu">
                                    @foreach (var st in ViewBag.IndustryList)
                                    {
                                        <li><a href="javascript:void(0);" id="@st.IndustryTypeId" onclick="selectindustry(this.id, this.text);">@st.IndustryType1</a></li>
                                    }
                                </ul>*@
                            @Html.HiddenFor(model => model.BusinessProfileViewModel.IndustryTypeId)
                            @Html.ValidationMessageFor(model => model.BusinessProfileViewModel.IndustryTypeId, "", new { @class = "text-danger ValidationFontSize " })
                            @*<li><a href="#industry1">Industry 1</a></li>
                                <li><a href="#industry2">Industry 2</a></li>*@

                        </div>
                    </div>
                    @*<div class="col col-xs-24 col-sm-24">
                            <span class="cr-box-title">Full Name</span>
                            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @placeholder = "Full Name" } })
                            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger ValidationFontSize" })
                        </div>*@
                    <div class="col col-xs-24 col-sm-12">
                        <span class="cr-box-title">First Name</span>
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @placeholder = "First Name" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-12">
                        <span class="cr-box-title">Last Name</span>
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @placeholder = "Last Name" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="logo-avatar col col-xs-12 col-sm-6">
                                <span class="upload-title">Company Logo</span>
                                <div class="upload-ad">
                                    <i class="fa fa-user">
                                        <img id="mylogoBusiness" />
                                    </i>
                                    @*<input type="file" name="" class="" value="Attach your resume"  accept="image/*">*@
                                    @Html.TextBoxFor(model => model.LogoURL, new { @class = "form-control attachment-box", type = "file", onchange = "checkext(this.id);ShowImagePreviewBussiness(this);", @id = "businesslogourl" })
                                </div>
                                @*<span class="upload-progress-bar"><img src="~/ClientFiles/final%20html/images/upload-progress-bar.png" alt=""></span>*@
                            </div>
                            <div class="col col-xs-24 col-sm-18">
                                <span class="cr-box-title">Company Name</span>

                                @Html.EditorFor(model => model.BusinessProfileViewModel.CompanyName, new { htmlAttributes = new { @placeholder = "Company Name" } })
                                @Html.ValidationMessageFor(model => model.BusinessProfileViewModel.CompanyName, "", new { @class = "text-danger ValidationFontSize" })
                            </div>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <span class="cr-box-title">Company Phone</span>
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @placeholder = "Company Phone", @id = "businessPhoneNo" } })
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-24 address">
                        <span class="cr-box-title">Company Address</span>
                        @Html.EditorFor(model => model.BusinessProfileViewModel.Address, new { htmlAttributes = new { @placeholder = "Company Address" } })
                        @Html.ValidationMessageFor(model => model.BusinessProfileViewModel.Address, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="col col-xs-24 col-sm-8">
                                <div class="input-group-btn search-panel">
                                    @*<button type="button" class="btn btn-default dropdown-toggle text-left" data-toggle="dropdown">
                                            <span id="ststate" name="ststate">State</span>
                                            <span class="arrow-button"><i class="fa fa-angle-down"></i></span>
                                        </button>
                                        <ul class="dropdown-menu dropdownscroll" role="menu">
                                            @foreach (var st in ViewBag.State)
                                            {
                                                <li><a href="javascript:void(0);" id="@st.StateId" onclick="selectbusinessstate(this.id, this.text);">@st.Abbreviation</a></li>
                                            }

                                        </ul>*@
                                    @Html.DropDownListFor(m => m.StateId, new SelectList(ViewBag.State, "StateId", "Abbreviation"), new { @class = "selectpicker" })
                                    @Html.HiddenFor(model => model.StateId)
                                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger ValidationFontSize" })
                                    <input type="hidden" name="UserId" value="@ViewBag.UserId">
                                    @*@Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.State, "StateId", "Abbreviation"), new { @class = "form-control btn btn-default dropdown-toggle text-left" })*@
                                </div>
                            </div>
                            <div class="col col-xs-24 col-sm-9">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @placeholder = "City" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger ValidationFontSize" })
                            </div>
                            <div class="col col-xs-24 col-sm-7">
                                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @placeholder = "Zip Code" } })
                                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger ValidationFontSize" })
                            </div>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <span class="cr-box-title">Company Website</span>
                        @Html.EditorFor(model => model.BusinessProfileViewModel.Website, new { htmlAttributes = new { @placeholder = "http://" } })
                        @Html.ValidationMessageFor(model => model.BusinessProfileViewModel.Website, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <span class="cr-box-title">Username</span>

                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @placeholder = "Username", @onblur = "checkusername(this.value, 'business');" } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger ValidationFontSize" })
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Password</span>
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @placeholder = "Password", @Id = "txtpassword" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger ValidationFontSize" })
                                <span id="result2"></span>
                            </div>
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Confirm Password</span>
                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @placeholder = "Confirm Password" } })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger ValidationFontSize" })
                            </div>
                        </div>
                        @*<div class="row">
                                <div class="col col-xs-24 col-sm-12">
                                    <span class="password-progress-bar">
                                        <img src="~/ClientFiles/final%20html/images/password-progress-bar.png" alt="">
                                        <span>Weak</span>
                                    </span>
                                </div>
                                <div class="col col-xs-24 col-sm-12">
                                    <div class="note-mess2">Password does not match</div>
                                </div>
                            </div>*@
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="check-note">
                            <div class="input-wrap input-wrap--small">
                                @Html.HiddenFor(model => model.BusinessProfileViewModel.IsSpotFinder)
                                @*@Html.CheckBoxFor(model => model.BusinessProfileViewModel.IsSpotFinder, new { @checked = "checked", @id = "checkbox-2" })*@
                                <input type="checkbox" id="checkbox-2" onclick="setcheck(this.checked);" />
                                <i class="fa fa-fw fa-check"></i>
                                <span class="morph-shape" data-morph-active="M273,273c0,0-55.8,24-123,24c-78.2,0-123-24-123-24S3,235.3,3,150C3,79.936,27,27,27,27S72,3,150,3c85,0,123,24,123,24s24,38.43,24,123C297,229.646,273,273,273,273z">
                                    <svg width="100%" height="100%" viewBox="0 0 300 300" preserveAspectRatio="none">
                                        <path stroke="#333" stroke-width="5" d="M273,273c0,0-55.8,0-123,0c-78.2,0-123,0-123,0s0-37.7,0-123c0-70.064,0-123,0-123s45,0,123,0c85,0,123,0,123,0s0,38.43,0,123C273,229.646,273,273,273,273z" />
                                    </svg>
                                </span>
                            </div>
                            <label>Add this business to the Spot Finder</label>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <input type="submit" name="button" id="buttonbusiness" value="Complete Registration">
                        <span id="spabussusername" style="display: none; color: red; padding-left: 100px;">Username already exists.</span>
                    </div>
                </div>
            }
        </div>

        <div id="personal">

            @using (Html.BeginForm("CreateProfile", "Account", FormMethod.Post, new { @class = "form-horizontal comp-reg-form", role = "form", enctype = "multipart/form-data", @id = "PersonalForm" }))
            {
                @*@Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "notifications coupon-expired" })*@
                @*@Html.ValidationSummary("", new { @class = "text-danger" })*@
                <div class="row">
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <input type="hidden" name="UserTypeId" value="1" />
                            <div class="logo-avatar col col-xs-12 col-sm-6">
                                <span class="upload-title">Avatar</span>
                                <div class="upload-ad">
                                    <i class="fa fa-user">
                                        <img id="mylogo" />
                                    </i>

                                    @Html.TextBoxFor(model => model.LogoURL, new { @class = "form-control attachment-box", type = "file", onchange = "checkext(this.id);ShowImagePreview(this);", @id = "personallogourl" })
                                    <input type="hidden" name="UserId" value="@ViewBag.UserId">
                                    @*<img id="PersonalImage" />*@
                                    @*<input type="file" name="pic" class="attachment-box" value="Attach your resume" accept="image/*">*@
                                </div>
                            </div>
                            <div class="col col-xs-24 col-sm-9">
                                <span class="cr-box-title">First Name</span>
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @placeholder = "First Name" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                            <div class="col col-xs-24 col-sm-9">
                                <span class="cr-box-title">Last Name</span>
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @placeholder = "Last Name" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Username</span>
                                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @placeholder = "User name", @onblur = "checkusername(this.value, 'user');" } })
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Phone Number</span>
                                @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @placeholder = "Phone Number", @id = "personalPhoneNo" } })
                                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Password</span>
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @placeholder = "Password", @id = "example-progress-bar-hierarchy" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger ValidationFontSize " })
                                @*<span id="result"></span>*@

                                <div class="form-group">
                                    <div class="col-sm-12" id="example-progress-bar-hierarchy-container">
                                    </div>
                                    <div class="col-sm-12"></div>
                                    <div class="col-sm-24" id="example-text-hierarchy-text">
                                    </div>
                                </div>
                            </div>
                            <div class="col col-xs-24 col-sm-12">
                                <span class="cr-box-title">Confirm Password</span>

                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @placeholder = "Confirm Password" } })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                        </div>
                        @*<div class="row">
                                <div class="col col-xs-24 col-sm-12">
                                    <span class="password-progress-bar">
                                        <img src="~/ClientFiles/final%20html/images/password-progress-bar.png" alt="">
                                        <span>Weak</span>
                                    </span>
                                </div>
                                <div class="col col-xs-24 col-sm-12">
                                    <div class="note-mess2">Password does not match</div>
                                </div>
                            </div>*@
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <div class="row">
                            <div class="col col-xs-24 col-sm-8">
                                <div class="input-group-btn search-panel">
                                    @*@Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.State, "StateId", "StateName"), new { @class = "form-control btn btn-default dropdown-toggle text-left" })*@
                                    @*<button type="button" class="btn btn-default dropdown-toggle text-left" data-toggle="dropdown">
                                            <span id="personalState" name="personalState">State</span>
                                            <span class="arrow-button"><i class="fa fa-angle-down"></i></span>
                                        </button>
                                        <ul class="dropdown-menu dropdownscroll" role="menu">
                                            @foreach (var st in ViewBag.State)
                                            {
                                                <li><a href="javascript:void(0);" id="@st.StateId" onclick="selectstatePersonal(this.id, this.text);">@st.Abbreviation</a></li>
                                            }
                                        </ul>*@
                                    @Html.DropDownListFor(m => m.StateId, new SelectList(ViewBag.State, "StateId", "Abbreviation"), new { @class = "selectpicker" })
                                    @Html.HiddenFor(model => model.StateId, new { @id = "PersonalStateId" })
                                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger ValidationFontSize " })
                                    <input type="hidden" name="UserId" value="@ViewBag.UserId">
                                    @*<li><a href="#state2">AL</a></li>*@

                                    @*<button type="button" class="btn btn-default dropdown-toggle text-left" data-toggle="dropdown">
                                            <span id="state">State</span>
                                            <span class="arrow-button"><i class="fa fa-angle-down"></i></span>
                                        </button>
                                        <ul class="dropdown-menu" role="menu">
                                            <li><a href="#state1">FL</a></li>
                                            <li><a href="#state2">AL</a></li>
                                        </ul>*@
                                </div>
                            </div>
                            <div class="col col-xs-24 col-sm-9">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @placeholder = "City" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger ValidationFontSize " })
                            </div>
                            <div class="col col-xs-24 col-sm-7">
                                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @placeholder = "Zip Code" } })
                                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger ValidationFontSize" })
                            </div>
                        </div>
                    </div>
                    <div class="col col-xs-24 col-sm-24">
                        <input type="submit" name="button" id="buttonuser" value="Complete Registration">
                        <span id="spausername" style="display: none; color: red; padding-left: 100px;">Username already exists.</span>
                    </div>
                </div>

            }
        </div>

    </div>
</div>